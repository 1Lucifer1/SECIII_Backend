def GetRemoteServer(ip){
    def remote = [:]
    remote.name = 'remoteServer'
    remote.host = ip
    remote.port = 22
    remote.user = 'root'
    remote.password = 'chenganchun.0811'
    remote.allowAnyHosts = true
    return remote
}

pipeline {
    agent any
    stages {
        stage('Clone to master') {
            agent {
                label 'master'
            }
            steps {
                echo "1. Git Clone Stage"
                git credentialsId: '79d2c1e6-d63c-4284-bd1f-6b4f1dfe7f56', url: "http://212.129.149.40/181250010_irbl/backend.git", branch: "release"
            }
        }
        /*stage('change yml file properties'){
            steps{
                sh """
                   rm -f src/target/IRBL-0.0.1-SNAPSHOT.jar
                   sed -i 's/root/visitor/g' ${WORKSPACE}/src/main/resources/application.yml
                   sed -i 's/#password: fill it in application-dev.yml/password: mysql@irbl/g' ${WORKSPACE}/src/main/resources/application.yml
                   sed -i 's/com.mysql.cj.jdbc.Driver/com.mysql.jdbc.Driver/g' ${WORKSPACE}/src/main/resources/application.yml
                   sed -i 's/localhost:3306/101.132.253.222/g' ${WORKSPACE}/src/main/resources/application.yml
                   """
            }
        }
        stage('change path'){
            steps{
                sh """
                   sed -i 's#ROOT_PATH.*#ROOT_PATH = "~/data/";#g' ${WORKSPACE}/src/main/java/team/software/irbl/util/SavePath.java
                   """
            }
        }*/
        stage('Maven Build') {
            agent {
                docker {
                    image 'maven:latest'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                echo "2. Maven Build Stage"
                sh 'mvn clean package -Dmaven.test.skip=true'
                sh 'mvn test jacoco:report'
            }
        }

        /*stage('Unit Test') {
            agent {
                docker {
                    image 'maven:latest'
                    args '-v /root/.m2:/root/.m2'
                }
            }
            steps {
                echo "3. Unit Test"
                //clean test. All tests should pass.

                //code coverage.LineCoverage>70%.
            }

        }*/
        stage('Image Build') {
            agent {
                label 'master'
            }
            steps {
                echo "4. Image Build Stage"
                sh 'docker build -f Dockerfile --build-arg jar_name=target/IRBL-0.0.1-SNAPSHOT.jar -t irbl:${BUILD_ID} . '
                sh 'docker tag irbl:${BUILD_ID} 101.132.148.43/backend/irbl:${BUILD_ID}'

            }

        }
        stage('Push') {
            agent {
                label 'master'
            }
            steps {
                echo "5. Push Docker Image Stage"
                sh "docker login -u admin -p Harbor12345@irbl 101.132.148.43"
                sh "docker push 101.132.148.43/backend/irbl:${BUILD_ID}"
            }
        }
        stage('Pull and Run'){
            agent {
                label 'master'
            }
            steps {
                 echo "6. Login Docker Image Stage"
                 script{
                     remoteServer = GetRemoteServer('101.132.253.222')
                     sshCommand remote: remoteServer, command: "docker login -u admin -p Harbor12345@irbl 101.132.148.43"
                 }
                 echo "7. Push Docker Image Stage"
                 script{
                     sshCommand remote: remoteServer, command: "docker pull 101.132.148.43/backend/irbl:${BUILD_ID}"
                 }
                 echo "8. Run Docker Image Stage"
                 script{
                     sshCommand remote: remoteServer, command: "docker run --rm -it -p 40000:40000 --link mybatis-mysql:mysql --name irbl-backend -d 101.132.148.43/backend/irbl:${BUILD_ID}"
                 }
            }
        }

    }
}

